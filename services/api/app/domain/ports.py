from typing import Protocol, Optional
from sqlalchemy.orm import Session

class MediaAssetRepo(Protocol):
    def get(self, db: Session, asset_id: int) -> "MediaAsset": ...
    def save_text(self, db: Session, asset_id: int, text: str) -> None: ...
    def save_embedding(self, db: Session, asset_id: int, emb: list[float]) -> None: ...

class BlobStore(Protocol):
    def put_bytes(self, bucket: str, key: str, data: bytes, content_type: str) -> None: ...
    def object_exists(self, bucket: str, key: str) -> bool: ...
    def get_object_bytes(self, bucket: str, key: str) -> bytes: ...
    def get_uri_bytes(self, uri: str) -> bytes: ...
    def parse_s3_uri(self, uri: str) -> tuple[str, str]: ...
    def generate_presigned_url(self, client_method: str, params: dict, expires_in: int = 3600) -> str: ...
    @staticmethod
    def sha256_bytes(data: bytes) -> str: ...

class OcrPort(Protocol):
    def image_bytes_to_text(self, blob: bytes, lang: Optional[str] = None) -> str: ...
    def pdf_bytes_to_text(self, blob: bytes, lang: Optional[str] = None) -> str: ...
    def xlsx_bytes_to_text(self, blob: bytes) -> str: ...

class EmbeddingModelPort(Protocol):
    def embed_text(self, text: str) -> list[float]: ...
