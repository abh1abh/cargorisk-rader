from typing import Protocol

from sqlalchemy.orm import Session

from ..models import MediaAsset


class MediaAssetRepo(Protocol):
    def get(self, db: Session, asset_id: int) -> MediaAsset: ...
    def save_text(self, db: Session, asset_id: int, text: str) -> None: ...
    def save_embedding(self, db: Session, asset_id: int, emb: list[float]) -> None: ...

class BlobStore(Protocol):
    def put_bytes(self, bucket: str, key: str, data: bytes, content_type: str) -> None: ...
    def object_exists(self, bucket: str, key: str) -> bool: ...
    def get_object_bytes(self, bucket: str, key: str) -> bytes: ...
    def get_uri_bytes(self, uri: str) -> bytes: ...
    def parse_s3_uri(self, uri: str) -> tuple[str, str]: ...
    def generate_presigned_url(self, client_method: str, params: dict, expires_in: int = 3600) -> str: ...
    @staticmethod
    def sha256_bytes(data: bytes) -> str: ...

class OcrPort(Protocol):
    def image_bytes_to_text(self, blob: bytes, lang: str | None = None) -> str: ...
    def pdf_bytes_to_text(self, blob: bytes, lang: str | None = None) -> str: ...
    def xlsx_bytes_to_text(self, blob: bytes) -> str: ...

class EmbeddingModelPort(Protocol):
    def embed_text(self, text: str) -> list[float]: ...

class FreightRepo(Protocol):
    def create_shipment_request(self, db: Session, source_asset_id: int, status: str, meta: dict | None) -> int: ...
    def add_items(self, db: Session, shipment_request_id: int, items: list[dict]) -> None: ...
    def get_shipment_request(self, db: Session, shipment_request_id: int) -> tuple[dict, list[dict]]: ...
