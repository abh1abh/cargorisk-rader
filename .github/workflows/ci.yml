name: CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: cargorisk
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U app" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports: ["6379:6379"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install API deps + dev tools
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api/requirements.txt
          pip install ruff pytest httpx pytest-asyncio

      - name: Lint (Ruff)
        run: ruff check services/api

      - name: Configure environment for tests
        run: |
          echo "postgres_host=localhost" >> $GITHUB_ENV
          echo "postgres_port=5432" >> $GITHUB_ENV
          echo "postgres_db=cargorisk" >> $GITHUB_ENV
          echo "postgres_user=app" >> $GITHUB_ENV
          echo "postgres_password=app" >> $GITHUB_ENV
          echo "redis_url=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "s3_endpoint=http://localhost:9000" >> $GITHUB_ENV
          echo "s3_access_key=minio" >> $GITHUB_ENV
          echo "s3_secret_key=minio123" >> $GITHUB_ENV
          echo "s3_bucket=uploads" >> $GITHUB_ENV

      - name: Test (Pytest)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q services/api/tests -k "not e2e"

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install web deps
        working-directory: web
        run: npm ci

      - name: Lint web (ESLint + Prettier)
        working-directory: web
        run: |
          npm i -D prettier eslint-config-prettier
          npm run lint
